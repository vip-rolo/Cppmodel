#include<iostream>
#include<cstdio>
#define N 100001
#define ls rt<<1
#define rs rt<<1|1
#define ll long long
using namespace std;
struct edge{
	ll to,next;
}e[N<<1];
ll head[N],a[N],cnt;
ll n,m,rt;
ll dep[N],son[N],top[N],fa[N],siz[N];//深度，重儿子，链顶，父亲节点，子树大小
ll seg[N],rev[N];//节点映射
struct tree{
	ll val,tag;
}t[N<<2];
//建边
void add(ll x,ll y)
{
	e[++cnt]=(edge){y,head[x]};
	head[x]=cnt;
}
//标记
void dfs1(ll x)
{
	siz[x]=1;
	for(ll i=head[x];i;i=e[i].next)
	{
		ll y=e[i].to;
		if(y==fa[x])
			continue;
		fa[y]=x;
		dep[y]=dep[x]+1;
		dfs1(y);
		if(siz[son[x]]<siz[y])
			son[x]=y;
		siz[x]+=siz[y]; 
	}
}
void dfs2(ll x)
{
	if(!son[x])
		return;
	seg[son[x]]=++seg[0];
	rev[seg[0]]=son[x];
	top[son[x]]=top[x];
	dfs2(son[x]);
	for(ll i=head[x];i;i=e[i].next)
	{
		ll y=e[i].to;
		if(y==fa[x]||y==son[x])
			continue;
		seg[y]=++seg[0];
		rev[seg[0]]=y;
		top[y]=y;
		dfs2(y);
	}
}
//线段树
void pushup(ll rt)
{
	t[rt].val=t[ls].val+t[rs].val;
}
inline void Pushdown(ll rt,ll l,ll r,ll tag)
{
	t[rt].val+=(r-l+1)*tag;
	t[rt].tag+=tag;
}
inline void pushdown(ll rt,ll l,ll r)
{
    ll mid=(l+r)>>1;
    Pushdown(ls,l,mid,t[rt].tag);
    Pushdown(rs,mid+1,r,t[rt].tag);
    t[rt].tag=0;
}
void build(ll rt,ll l,ll r)
{
    if(l==r)
	{
		t[rt].val=a[rev[l]];
		return;
	}
    ll mid=(l+r)>>1;
    build(ls,l,mid);

	build(rs,mid+1,r);

    pushup(rt);
}
void update(ll rt,ll l,ll r,ll x,ll y,ll val)
{
	if(x<=l&&r<=y)
	{
		t[rt].val+=(r-l+1)*val;
		t[rt].tag+=val;
		return;
	}
	if(t[rt].tag!=0)
		pushdown(rt,l,r);
	ll mid=(l+r)>>1;
	if(x<=mid)
		update(ls,l,mid,x,y,val);
	if(mid<y) 
		update(rs,mid+1,r,x,y,val);
	pushup(rt);
}
ll ask(ll rt,ll l,ll r,ll x,ll y)
{
	if(x<=l&&r<=y)
		return t[rt].val;
	ll mid=(l+r)>>1,ans=0;
	if(t[rt].tag!=0)
		pushdown(rt,l,r);
	if(x<=mid)
		ans+=ask(ls,l,mid,x,y);
	if(mid<y)
		ans+=ask(rs,mid+1,r,x,y);
	return ans;
}
//实际运用
ll query(ll x,ll y)
{
	ll fx=top[x],fy=top[y],ans=0;
	while(fx!=fy)
	{
		if(dep[fx]<dep[fy])
			swap(x,y),swap(fx,fy);

		ans+=ask(1,1,n,seg[fx],seg[x]);
		x=fa[fx],fx=top[x];
	}
	if(dep[x]>dep[y])
		swap(x,y);

    ans+=ask(1,1,n,seg[x],seg[y]);
    return ans;
}
int main()
{
	ll x,y,op;
	rt=1;
	scanf("%lld%lld",&n,&m);

	for(ll i=1;i<=n;i++)
		scanf("%lld",&a[i]);

	for(ll i=1;i<n;i++)
	{
		scanf("%lld%lld",&x,&y);

		add(x,y);add(y,x);

	}
	dep[1]=rev[1]=seg[0]=seg[1]=top[1]=1;
	dfs1(rt);dfs2(rt);
	build(1,1,n);

	while(m--)
	{
		scanf("%lld%lld",&op,&x);

		if(op==1)
			scanf("%lld",&y),

			update(1,1,n,seg[x],seg[x],y);
		else if(op==2)
			scanf("%lld",&y),

			update(1,1,n,seg[x],seg[x]+siz[x]-1,y);
		else
			printf("%lld\n",query(1,x));
	}
	return 0;
}
